apply plugin: 'com.android.library'

version = VERSION_NAME_SDK
android {
    compileSdkVersion 30

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 30
        versionCode 1
        versionName "${version}"
        consumerProguardFile 'proguard-rules.pro'

        testApplicationId "cn.thinkingdata.analytics"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'

        addManifestPlaceholders([TAAuthID:"1b1c1fef65e3482bad5c9d0e6a823356"])

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [TROUTER_MODULE_NAME: 'Analytic']
            }
        }
    }
    testOptions {
//        execution 'ANDROIDX_TEST_ORCHESTRATOR'

    }
    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            minifyEnabled true
        }
        release {
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
//    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
//    compileOnly project(path: ':core')
    implementation 'cn.thinkingdata.android:TDCore:1.2.0'
    compileOnly project(path: ':ta_apt')
    annotationProcessor project(path: ':ta_apt')
    //implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'

    testImplementation 'org.mockito:mockito-core:2.19.0'
    androidTestImplementation 'androidx.test:core:1.2.0'
    androidTestImplementation 'androidx.test:runner:1.3.0-alpha01'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2-alpha01'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0-alpha01'
    androidTestUtil 'androidx.test:orchestrator:1.2.0'
}

// make Jar
def SDK_BASENAME ="ThinkingAnalyse";
def SDK_VERSION ="-${version}";
def sdkDestinationPath ="build/outputs/jar/";
def zipFile = file('build/intermediates/packaged-classes/release/classes.jar')

task deleteBuild(type: Delete) {
    delete sdkDestinationPath + SDK_BASENAME + SDK_VERSION +".jar"
}

task makeJar(type: Jar) {
    from zipTree(zipFile)
    from fileTree(dir:'src/main', includes: ['assets/**'])// Package all the files in the assets directory
    baseName = SDK_BASENAME
    destinationDir = file(sdkDestinationPath)
}

makeJar.dependsOn(deleteBuild, build)

// release new version bintrayUpload
//apply plugin: 'com.novoda.bintray-release'
//
//Properties properties = new Properties()
//properties.load(project.rootProject.file('local.properties').newDataInputStream())
//publish {
//    bintrayUser = properties.getProperty("bintray.user")
//    bintrayKey = properties.getProperty("bintray.apikey")
//    dryRun = false
//    userOrg = POM_ORGANIZATION
//    repoName = POM_REPO_NAME
//    groupId = POM_GROUP_ID
//    artifactId = 'ThinkingAnalyticsSDK'
//    publishVersion = version
//    desc = 'The official Android SDK for Thinking Data Analytics'
//    website = POM_WEBSITE
//}

// Upload to the local code base
apply plugin: 'maven'
uploadArchives{
    repositories{
        mavenDeployer{
            repository(url:uri('/Users/liulongbing/Documents/repos'))
            pom.groupId = POM_GROUP_ID
            pom.artifactId = 'ThinkingAnalyticsSDK'
            pom.version = version
        }
    }
}
tasks.withType(Javadoc).all { enabled = false }


//maven central publish
ext {
    PUBLISH_GROUP_ID = "cn.thinkingdata.android"
    PUBLISH_ARTIFACT_ID = 'ThinkingAnalyticsSDK'
    PUBLISH_VERSION = VERSION_NAME_SDK                   
}
apply from: "publish-mavencentral.gradle"